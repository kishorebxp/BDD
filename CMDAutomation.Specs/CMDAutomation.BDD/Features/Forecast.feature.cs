// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CMDAutomation.BDD.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Forecast")]
    public partial class ForecastFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Forecast.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Forecast", "\tIn order to project my companies/projects data\r\n\tAs a Forecast user\r\n\tI want to " +
                    "be shown with the right data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate development type for the selected measurement type 1")]
        [NUnit.Framework.CategoryAttribute("Forecast")]
        public virtual void ValidateDevelopmentTypeForTheSelectedMeasurementType1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate development type for the selected measurement type 1", new string[] {
                        "Forecast"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I navigate to application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("navigate to \'Forecast\' module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
   testRunner.And("expand all the filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("Data Set is \'Historical and Forecast\' and Measurement type is \'Value\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table1.AddRow(new string[] {
                        "All"});
            table1.AddRow(new string[] {
                        "New and Addition"});
            table1.AddRow(new string[] {
                        "Renovation"});
#line 12
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table1, "Then ");
#line 17
 testRunner.When("select \'Sq.Ft.\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table2.AddRow(new string[] {
                        "New and Addition"});
#line 18
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table3.AddRow(new string[] {
                        "All"});
            table3.AddRow(new string[] {
                        "Renovation"});
#line 21
  testRunner.And("The following Development Types should be disabled", ((string)(null)), table3, "And ");
#line 25
 testRunner.When("select \'Projects\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table4.AddRow(new string[] {
                        "All"});
            table4.AddRow(new string[] {
                        "New"});
            table4.AddRow(new string[] {
                        "Addition"});
            table4.AddRow(new string[] {
                        "Alteration"});
            table4.AddRow(new string[] {
                        "Addition/Alteration"});
#line 26
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate development type for the selected measurement type 3")]
        [NUnit.Framework.CategoryAttribute("Forecast")]
        public virtual void ValidateDevelopmentTypeForTheSelectedMeasurementType3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate development type for the selected measurement type 3", new string[] {
                        "Forecast"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I navigate to application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
   testRunner.And("navigate to \'Forecast\' module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
   testRunner.And("expand all the filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("Data Set is \'Historical and Forecast\' and Measurement type is \'Value\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table5.AddRow(new string[] {
                        "All"});
            table5.AddRow(new string[] {
                        "New and Addition"});
            table5.AddRow(new string[] {
                        "Renovation"});
#line 40
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table5, "Then ");
#line 45
 testRunner.When("select \'Sq.Ft.\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table6.AddRow(new string[] {
                        "New and Addition"});
#line 46
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table7.AddRow(new string[] {
                        "All"});
            table7.AddRow(new string[] {
                        "Renovation"});
#line 49
  testRunner.And("The following Development Types should be disabled", ((string)(null)), table7, "And ");
#line 53
 testRunner.When("select \'Projects\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table8.AddRow(new string[] {
                        "All"});
            table8.AddRow(new string[] {
                        "New"});
            table8.AddRow(new string[] {
                        "Addition"});
            table8.AddRow(new string[] {
                        "Alteration"});
            table8.AddRow(new string[] {
                        "Addition/Alteration"});
#line 54
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate development type for the selected measurement type 2")]
        [NUnit.Framework.CategoryAttribute("Forecast")]
        public virtual void ValidateDevelopmentTypeForTheSelectedMeasurementType2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate development type for the selected measurement type 2", new string[] {
                        "Forecast"});
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I navigate to application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
   testRunner.And("navigate to \'Forecast\' module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
   testRunner.And("expand all the filters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("Data Set is \'Historical and Forecast\' and Measurement type is \'Value\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table9.AddRow(new string[] {
                        "All"});
            table9.AddRow(new string[] {
                        "New and Addition"});
            table9.AddRow(new string[] {
                        "Renovation"});
#line 68
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table9, "Then ");
#line 73
 testRunner.When("select \'Sq.Ft.\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table10.AddRow(new string[] {
                        "New and Addition"});
#line 74
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table11.AddRow(new string[] {
                        "All"});
            table11.AddRow(new string[] {
                        "Renovation"});
#line 77
  testRunner.And("The following Development Types should be disabled", ((string)(null)), table11, "And ");
#line 81
 testRunner.When("select \'Projects\' measurement type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "DevelopmentType"});
            table12.AddRow(new string[] {
                        "All"});
            table12.AddRow(new string[] {
                        "New"});
            table12.AddRow(new string[] {
                        "Addition"});
            table12.AddRow(new string[] {
                        "Alteration"});
            table12.AddRow(new string[] {
                        "Addition/Alteration"});
#line 82
 testRunner.Then("the following Development Types should be displayed and enabled", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
